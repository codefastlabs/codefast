---
description: Monorepo development guidelines and workspace management
---

# Monorepo Development Guidelines

## Workspace Structure

This monorepo follows a structured approach with clear separation of concerns:

### Directory Organization
- `apps/` - Applications (Next.js apps, documentation sites)
- `packages/` - Reusable packages and libraries
- `docs/` - Project documentation and guides
- `scripts/` - Utility scripts for project management

### Package Naming Conventions
- **UI Components**: `@codefast-ui/component-name` (e.g., `@codefast-ui/checkbox-group`)
- **Core Packages**: `@codefast/package-name` (e.g., `@codefast/hooks`, `@codefast/ui`)
- **Apps**: `@app/app-name` (e.g., `@app/docs`)

## Dependency Management

### Workspace Dependencies
- Use `workspace:*` protocol for internal dependencies
- All workspace packages must be published together
- Version alignment across workspace packages is maintained via changesets

### Dependency Installation
```bash
# Install dependency for specific workspace
pnpm add react --filter=@codefast/ui

# Install dev dependency for all packages
pnpm add -D typescript --workspace-root

# Install dependencies for all workspaces
pnpm install
```

### Shared Configurations
- **TypeScript**: Extend from `@codefast/typescript-config`
- **ESLint**: Extend from `@codefast/eslint-config`
- **Build Tools**: Use rslib for package builds, Next.js for apps

## Development Workflow

### Task Execution
Use Turbo for efficient task execution with proper caching:

```bash
# Build all packages (respects dependency graph)
pnpm build

# Build specific package and its dependencies
pnpm build --filter=@codefast/ui...

# Run tests with watch mode
pnpm test:watch
```

### Package Development
1. **Create new packages** in `packages/` directory
2. **Follow naming conventions** and package.json structure
3. **Add to workspace** via [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml)
4. **Configure build** using rslib with [rslib.config.ts](mdc:packages/ui/rslib.config.ts) as reference
5. **Export configuration** must include CJS and ESM formats

### Cross-Package Dependencies
- Always use workspace protocol: `"@codefast/hooks": "workspace:*"`
- Ensure proper build order in [turbo.json](mdc:turbo.json)
- Test interdependencies with integration tests

## Quality Standards

### Build Requirements
- All packages must build successfully
- No TypeScript errors or warnings
- ESLint must pass with zero warnings
- Jest tests must achieve 100% success rate

### Release Process
- Use Changesets for version management: `pnpm release`
- Canary releases available: `pnpm release:canary:enter`
- All packages are published together to maintain version consistency