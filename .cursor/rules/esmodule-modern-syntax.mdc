---
description: Use ES Modules with the latest JavaScript/TypeScript syntax
globs:
  - "**/*.ts"
  - "**/*.tsx"
  - "**/*.js"
  - "**/*.jsx"
alwaysApply: true
---
# ES Modules and Modern JavaScript/TypeScript Syntax

When generating or editing JavaScript or TypeScript code, adhere to the following guidelines to ensure the use of ES Modules and the latest JavaScript/TypeScript syntax, as supported by the project's `tsconfig.json` or `package.json` settings (`@file ../tsconfig.json`).

## 1. Use ES Modules
- Always use ES Module syntax (`import`/`export`) instead of CommonJS (`require`/`module.exports`).
- Use `import` for importing modules and `export` for exporting functions, variables, or types.
- Prefer named exports over default exports for clarity, unless a single primary export is more appropriate.
- Example:
  ```ts
  import { fetch } from "node-fetch";

  export const getData = async (url: string): Promise<unknown> => {
    const response = await fetch(url);
    return response.json();
  };
  ```

## 2. Leverage Modern JavaScript/TypeScript Syntax
- Use the latest JavaScript/TypeScript features as supported by `ESNext` (e.g., optional chaining (`?.`), nullish coalescing (`??`), logical assignment operators, modern array methods like `Array.prototype.at`).
- Prefer concise syntax (e.g., arrow functions, destructuring, spread/rest operators) where it improves readability.
- Avoid outdated patterns (e.g., `var`, IIFE for scoping, `for` loops when modern alternatives like `for...of` or `Array.prototype.map` are clearer).
- Example:
  ```ts
  import { User } from "./types";

  const users: User[] = [{ name: "Alice" }, { name: null }];

  // Modern syntax
  export const getNames = (users: User[]) =>
    users.map(({ name }) => name ?? "Unknown");

  // Optional chaining and modern array method
  const lastUser = users.at(-1)?.name ?? "No user";
  ```

## 3. Ensure Compatibility with ESNext
- Ensure `tsconfig.json` is configured with `"module": "ESNext"` and `"target": "ESNext"` to support the latest features.
- Use modern JavaScript APIs (e.g., `fetch`, `Promise.allSettled`, `String.prototype.replaceAll`) over legacy alternatives.
- Example:
  ```ts
  // Modern Promise handling
  export const fetchMultiple = async (urls: string[]) => {
    const results = await Promise.allSettled(urls.map(url => fetch(url)));
    return results.map(result => result.status === "fulfilled" ? result.value : null);
  };
  ```

## General Guidelines
- Reference `@file ../tsconfig.json` to align with project settings (e.g., `"module": "ESNext"`, `"target": "ESNext"`).
- Avoid CommonJS patterns unless explicitly required by the project.
- Use modern, concise syntax to improve code readability while maintaining clarity.
- Include JSDoc comments for exported functions to document their purpose and parameters.
- Example:
  ```ts
  /**
   * Filters users by status using modern syntax
   * @param users - Array of user objects
   * @param status - Status to filter by
   * @returns Filtered array of users
   */
  export const filterUsers = (users: User[], status: string) =>
    users.filter(user => user.status === status);
  ```

## Notes
- Do not use outdated JavaScript features (e.g., `var`, `Function` constructor) unless explicitly requested.
- Ensure all code is compatible with ES Module resolution and modern runtime environments (e.g., Node.js 20.x or browsers supporting ES2023+).
- If a newer JavaScript/TypeScript feature becomes available (e.g., post-TypeScript 5.6), prioritize its use where appropriate.
```
