/**
 * |--------------------------------------------------------------------------
 * | Global Styles & Theme Configuration
 * |--------------------------------------------------------------------------
 * |
 * | This file contains the global style configurations and theme system for
 * | the application. It serves as the foundation for consistent styling across
 * | all components and pages within the CodeFast ecosystem.
 * |
 * | Key Components:
 * |
 * | Base Layer Styles (@layer base):
 * |   - Global border and outline color configurations
 * |   - Custom scrollbar styling for webkit browsers
 * |   - Input field appearance normalization across browsers
 * |   - Root background and foreground color setup
 * |   - Cross-browser compatibility fixes
 * |
 * | Theme Variables (@theme inline):
 * |   - Animation & timing functions for consistent motion design
 * |   - CSS custom properties for the entire theming system
 * |   - Organized color categories (base, interactive, status, component-specific)
 * |   - Chart colors for data visualization components
 * |   - Semantic naming for better maintainability
 * |
 * | Technical Integration:
 * |   - Built on Tailwind CSS framework foundation
 * |   - Imports tw-animate-css for enhanced animations
 * |   - Supports automatic dark/light mode switching
 * |   - Follows design system principles from the monorepo
 * |
 * | Architecture Benefits:
 * |   - Centralized theme management across bounded contexts
 * |   - Consistent visual identity throughout the application
 * |   - Easy theme customization and brand adaptation
 * |   - Performance-optimized CSS custom properties
 * |   - Developer-friendly semantic color naming
 * |   - Accessibility-first approach with proper contrast ratios
 * |
 * | Responsive Design:
 * |   - Mobile-first approach with fluid scaling
 * |   - Touch-friendly interactive elements
 * |   - Optimized for various screen sizes and devices
 * |
 * | This configuration enables seamless theming across the entire application
 * | while maintaining consistency with the explicit architecture principles
 * | and component library standards defined in the CodeFast project.
 * |
 */

@import "tw-animate-css";

/**
 * |--------------------------------------------------------------------------
 * | Base Layer Styles
 * |--------------------------------------------------------------------------
 * |
 * | These styles are applied at the base layer and include:
 * | - Global border and outline color configurations
 * | - Custom scrollbar styling for webkit browsers
 * | - Input field appearance normalization
 * | - Root background and foreground color setup
 * |
 */

@layer base {
  /**
   * Global border and outline configuration
   * Sets consistent border colors and focus ring styles across all elements
   */
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-border);
    outline-color: color-mix(in oklab, var(--color-ring) 20%, transparent);
  }

  /**
   * Custom scrollbar styling for webkit browsers
   * Provides a minimal, themed scrollbar experience
   */
  ::-webkit-scrollbar {
    @apply size-2;
  }

  ::-webkit-scrollbar-track {
    @apply bg-transparent;
  }

  ::-webkit-scrollbar-thumb {
    @apply bg-border rounded-full;
  }

  /**
   * Firefox scrollbar styling
   * Ensures consistent scrollbar appearance across browsers
   */
  * {
    scrollbar-width: thin;
    scrollbar-color: var(--color-border) transparent;
  }

  /**
   * Root element styling
   * Sets the foundation colors for the entire application
   */
  html,
  body {
    background-color: var(--color-background);
    color: var(--color-foreground);
  }

  /**
   * Input field normalization
   * Removes browser-specific styling and behaviors for consistent appearance
   */
  input {
    &::-webkit-search-cancel-button,
    &::-webkit-search-decoration {
      appearance: none;
    }

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    &[type="number"] {
      -moz-appearance: textfield;
    }
  }
}

/**
 * |--------------------------------------------------------------------------
 * | Theme Color Variables
 * |--------------------------------------------------------------------------
 * |
 * | This section defines all the CSS custom properties that power the
 * | application's theming system. These variables are mapped from the
 * | base theme tokens and provide a consistent color palette throughout
 * | the application.
 * |
 * | Categories:
 * | - Base colors (background, foreground, border)
 * | - Interactive colors (primary, secondary, accent)
 * | - Status colors (destructive)
 * | - Component-specific colors (popover, card, sidebar)
 * | - Chart colors for data visualization
 * |
 */

@theme inline {
  /* Base Interface Colors */
  --color-input: var(--input);
  --color-border: var(--border);
  --color-ring: var(--ring);
  --color-background: var(--background);
  --color-foreground: var(--foreground);

  /* Primary Action Colors */
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);

  /* Secondary Action Colors */
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);

  /* Status Colors */
  --color-destructive: var(--destructive);

  /* Accent Colors */
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);

  /* Muted/Disabled Colors */
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);

  /* Popover Component Colors */
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover-overlay: var(--popover-overlay);

  /* Card Component Colors */
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);

  /* Sidebar Component Colors */
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  /* Chart/Data Visualization Colors */
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
}

/**
 * |--------------------------------------------------------------------------
 * | Smooth Easing Animation Function
 * |--------------------------------------------------------------------------
 * |
 * | This custom cubic-bezier timing function provides a smooth, natural
 * | animation easing that enhances user experience across interactive
 * | elements and transitions within the application.
 * |
 * | Technical Specifications:
 * |   - Cubic-bezier values: (0.32, 0.72, 0, 1)
 * |   - Animation curve: Smooth acceleration with gentle deceleration
 * |   - Optimized for UI micro-interactions and page transitions
 * |   - Cross-browser compatible timing function
 * |
 * | Usage Examples:
 * |   - Button hover effects and state changes
 * |   - Modal and drawer slide-in animations
 * |   - Loading states and progress indicators
 * |   - Page route transitions
 * |   - Component fade-in/fade-out effects
 * |
 * | Design Philosophy:
 * |   - Creates organic, human-like motion patterns
 * |   - Reduces jarring visual interruptions
 * |   - Maintains consistency with design system principles
 * |   - Enhances perceived performance through smooth transitions
 * |
 * | Performance Benefits:
 * |   - Hardware-accelerated when used with transform properties
 * |   - Lightweight alternative to complex animation libraries
 * |   - Optimized for 60fps smooth animations
 * |   - Memory-efficient CSS-native implementation
 * |
 * | This easing function aligns with the CodeFast design system's
 * | commitment to providing delightful, accessible user experiences
 * | through thoughtful animation and interaction design.
 * |
 */

@theme {
  /* Animation & Timing Functions */
  --ease-ui: cubic-bezier(0.32, 0.72, 0, 1);
}
