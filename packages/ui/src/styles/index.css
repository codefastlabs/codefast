/**
 * Named Color Theme Definitions
 * -----------------------------------------------------------------------------
 * Defines color variables used throughout the application to ensure interface
 * consistency. Each color group serves a specific purpose
 * (e.g., background, border, highlights).
 */
@theme {
  /**
   * Input Controls
   * ---------------------------------------------------------------------------
   * --color-input - Default border/outline for form controls
   * --color-input-hover - Interactive state for better visual feedback
   * --color-input-focus - Strong visual indicator for focused state
   */
  --color-input: var(--color-zinc-300);
  --color-input-hover: var(--color-sky-500);
  --color-input-focus: var(--color-sky-400);

  /**
   * Core UI Elements
   * ---------------------------------------------------------------------------
   * --color-border - Subtle boundaries between UI elements
   * --color-ring - Soft focus indicator for interactive elements
   */
  --color-border: var(--color-zinc-300);
  --color-ring: color-mix(in oklab, var(--color-sky-400) 35%, transparent);

  /**
   * Base Theme
   * ---------------------------------------------------------------------------
   * --color-background - Main canvas color
   * --color-foreground - Primary text color
   */
  --color-background: var(--color-white);
  --color-foreground: var(--color-zinc-950);

  /**
   * Primary Theme
   * ---------------------------------------------------------------------------
   * Used for:
   * - Call-to-action buttons
   * - Active navigation items
   * - Selected states
   * - Focus indicators
   */
  --color-primary: var(--color-sky-600);
  --color-primary-hover: var(--color-sky-700);
  --color-primary-foreground: var(--color-sky-50);

  /**
   * Secondary Theme
   * ---------------------------------------------------------------------------
   * Used for:
   * - Secondary buttons
   * - Alternative actions
   * - Less prominent UI elements
   */
  --color-secondary: var(--color-zinc-200);
  --color-secondary-hover: var(--color-zinc-300);
  --color-secondary-foreground: var(--color-zinc-950);

  /**
   * Status Colors
   * ---------------------------------------------------------------------------
   * Semantic colors for system feedback:
   * - Destructive: Errors, deletions, warnings
   * - Info: System messages, notifications
   * - Success: Confirmations, completed actions
   * - Warning: Alerts, important notices
   */
  --color-destructive: var(--color-red-500);
  --color-destructive-hover: var(--color-red-600);
  --color-destructive-foreground: var(--color-red-50);

  --color-info: var(--color-cyan-700);
  --color-info-hover: var(--color-cyan-800);
  --color-info-foreground: var(--color-cyan-50);

  --color-success: var(--color-green-700);
  --color-success-hover: var(--color-green-800);
  --color-success-foreground: var(--color-green-50);

  --color-warning: var(--color-yellow-700);
  --color-warning-hover: var(--color-yellow-800);
  --color-warning-foreground: var(--color-yellow-50);

  /**
   * Accent Theme
   * ---------------------------------------------------------------------------
   * Used for:
   * - Highlighting key features
   * - Brand elements
   * - Important UI components
   */
  --color-accent: var(--color-zinc-100);
  --color-accent-hover: var(--color-zinc-300);
  --color-accent-foreground: var(--color-zinc-950);

  /**
   * Muted Theme
   * ---------------------------------------------------------------------------
   * Used for:
   * - Helper text
   * - Placeholders
   * - Disabled states
   */
  --color-muted: var(--color-zinc-200);
  --color-muted-foreground: var(--color-zinc-500);

  /**
   * Overlay Components
   * ---------------------------------------------------------------------------
   * Used for floating elements:
   * - Dropdowns
   * - Tooltips
   * - Modal dialogs
   */
  --color-popover: var(--color-white);
  --color-popover-overlay: color-mix(in oklab, var(--color-zinc-950) 15%, transparent);
  --color-popover-foreground: var(--color-zinc-950);

  /**
   * Card Components
   * ---------------------------------------------------------------------------
   * Used for contained content blocks:
   * - Dashboard widgets
   * - Content panels
   * - Feature boxes
   */
  --color-card: var(--color-white);
  --color-card-foreground: var(--color-zinc-950);

  /**
   * Sidebar Navigation
   * ---------------------------------------------------------------------------
   * Comprehensive theme for sidebar components:
   * - Background & text colors
   * - Active/hover states
   * - Borders and separators
   * - Focus indicators
   */
  --color-sidebar: var(--color-zinc-50);
  --color-sidebar-foreground: var(--color-zinc-700);

  --color-sidebar-primary: var(--color-zinc-900);
  --color-sidebar-primary-foreground: var(--color-zinc-50);

  --color-sidebar-accent: var(--color-zinc-100);
  --color-sidebar-accent-foreground: var(--color-zinc-900);

  --color-sidebar-border: var(--color-zinc-200);
  --color-sidebar-ring: var(--color-sky-100);

  /**
   * Data Visualization
   * ---------------------------------------------------------------------------
   * Distinct colors for charts and graphs:
   * - Ensures sufficient contrast
   * - Maintains accessibility
   * - Provides visual hierarchy
   */
  --color-chart-1: var(--color-orange-500);
  --color-chart-2: var(--color-cyan-500);
  --color-chart-3: var(--color-lime-500);
  --color-chart-4: var(--color-yellow-500);
  --color-chart-5: var(--color-fuchsia-500);
}

/**
 * Base Styles
 * -----------------------------------------------------------------------------
 * Apply general settings for the entire interface, including background color,
 * text color, default border color, and customizations for input.
 */
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-border);
  }

  ::selection {
    background-color: var(--color-primary);
    color: var(--color-background);
  }

  html,
  body {
    background-color: var(--color-background);
    color: var(--color-foreground);
  }

  input {
    &::-webkit-search-cancel-button,
    &::-webkit-search-decoration {
      appearance: none;
    }
  }
}

/**
 * Keyframe Animations
 * -----------------------------------------------------------------------------
 * Defines basic animations such as cursor blinking effects,
 * expanding/collapsing content effects.
 */
@theme {
  --animate-caret-blink: caret-blink 1000ms ease infinite;
  --animate-collapsible-closed: collapsible-closed 200ms ease;
  --animate-collapsible-open: collapsible-open 200ms ease;

  @keyframes caret-blink {
    0%,
    70%,
    100% {
      opacity: 1;
    }

    20%,
    50% {
      opacity: 0;
    }
  }

  @keyframes collapsible-closed {
    from {
      height: var(--radix-collapsible-content-height);
    }
    to {
      height: 0;
    }
  }

  @keyframes collapsible-open {
    from {
      height: 0;
    }
    to {
      height: var(--radix-collapsible-content-height);
    }
  }
}

/**
 * Animation Timing Functions
 * -----------------------------------------------------------------------------
 * Easing functions used to adjust the speed of animation transitions.
 */
@theme {
  --animate-fade-in: fadeIn 250ms ease-out;
  --animate-fade-out: fadeOut 250ms ease-in;

  --animate-in: enter 300ms cubic-bezier(0.32, 0.72, 0, 1);
  --animate-out: exit 250ms cubic-bezier(0.32, 0.72, 0, 1);

  @keyframes fadeIn {
    from {
      opacity: var(--animation-enter-opacity, 0);
    }
  }

  @keyframes fadeOut {
    to {
      opacity: var(--animation-exit-opacity, 0);
    }
  }

  @keyframes enter {
    from {
      opacity: var(--animation-enter-opacity, 1);
      transform: translate3d(var(--animation-enter-translate-x, 0), var(--animation-enter-translate-y, 0), 0)
        scale3d(var(--animation-enter-scale, 1), var(--animation-enter-scale, 1), var(--animation-enter-scale, 1))
        rotate(var(--animation-enter-rotate, 0));
    }
  }

  @keyframes exit {
    to {
      opacity: var(--animation-exit-opacity, 1);
      transform: translate3d(var(--animation-exit-translate-x, 0), var(--animation-exit-translate-y, 0), 0)
        scale3d(var(--animation-exit-scale, 1), var(--animation-exit-scale, 1), var(--animation-exit-scale, 1))
        rotate(var(--animation-exit-rotate, 0));
    }
  }
}

/**
 * Animation Timing Functions
 * -----------------------------------------------------------------------------
 * Defines utilities to adjust animation speed.
 */
@utility animation-ease-linear {
  animation-timing-function: linear;
}

@utility animation-ease-in {
  animation-timing-function: var(--ease-in);
}

@utility animation-ease-out {
  animation-timing-function: var(--ease-out);
}

@utility animation-ease-in-out {
  animation-timing-function: var(--ease-in-out);
}

@utility animation-ease-initial {
  animation-timing-function: initial;
}

@utility animation-ease-* {
  animation-timing-function: --value([ *]);
}

/**
 * Animation Play State
 * -----------------------------------------------------------------------------
 * Adjust the playback state of the animation.
 */
@utility animation-state-paused {
  animation-play-state: paused;
}

@utility animation-state-running {
  animation-play-state: running;
}

@utility animation-state-initial {
  animation-play-state: initial;
}

@utility animation-state-* {
  animation-play-state: --value([ *]);
}

/**
 * Animation Repeat
 * -----------------------------------------------------------------------------
 * Controls the number of repetitions of the animation.
 */
@utility animation-repeat-infinite {
  animation-iteration-count: infinite;
}

@utility animation-repeat-initial {
  animation-iteration-count: initial;
}

@utility animation-repeat-* {
  animation-iteration-count: --value(integer, [integer]);
}

/**
 * Animation Composition
 * -----------------------------------------------------------------------------
 * Defines how animations combine with each other.
 */
@utility animation-composition-replace {
  animation-composition: replace;
}

@utility animation-composition-add {
  animation-composition: add;
}

@utility animation-composition-accumulate {
  animation-composition: accumulate;
}

@utility animation-composition-initial {
  animation-composition: initial;
}

@utility animation-composition-* {
  animation-composition: --value([ *]);
}

/**
 * Animation Delay
 * -----------------------------------------------------------------------------
 * Adjust the delay time before the animation starts.
 */
@utility animation-delay-initial {
  animation-delay: initial;
}

@utility animation-delay-* {
  animation-delay: calc(--value(integer) * 1ms);
  animation-delay: --value([ *]);
}

/**
 * Animation Direction
 * -----------------------------------------------------------------------------
 * Determines the playback direction of the animation.
 */
@utility animation-direction-normal {
  animation-direction: normal;
}

@utility animation-direction-reverse {
  animation-direction: reverse;
}

@utility animation-direction-alternate {
  animation-direction: alternate;
}

@utility animation-direction-alternate-reverse {
  animation-direction: alternate-reverse;
}

@utility animation-direction-initial {
  animation-direction: initial;
}

@utility animation-direction-* {
  animation-direction: --value([ *]);
}

/**
 * Animation Duration
 * -----------------------------------------------------------------------------
 * Defines the duration of the animation execution.
 */
@utility animation-duration-initial {
  animation-duration: initial;
}

@utility animation-duration-* {
  animation-duration: calc(--value(integer) * 1ms);
  animation-duration: --value([ *]);
}

/**
 * Animation Fill Mode
 * -----------------------------------------------------------------------------
 * Defines the state of the element after the animation ends.
 */
@utility animation-fill-none {
  animation-fill-mode: none;
}

@utility animation-fill-forwards {
  animation-fill-mode: forwards;
}

@utility animation-fill-backwards {
  animation-fill-mode: backwards;
}

@utility animation-fill-both {
  animation-fill-mode: both;
}

@utility animation-fill-* {
  animation-fill-mode: --value([ *]);
}

/**
 * Fade Animations
 * -----------------------------------------------------------------------------
 * Create fade-in and fade-out effects.
 */
@utility fade-in-* {
  --animation-enter-opacity: calc(--value(integer) * 1%);
  --animation-enter-opacity: --value(--opacity- *, [percentage]);
}

@utility fade-out-* {
  --animation-exit-opacity: calc(--value(integer) * 1%);
  --animation-exit-opacity: --value(--opacity- *, [percentage]);
}

/**
 * Rotate Animations
 * -----------------------------------------------------------------------------
 * Adjust the rotation angle of the element when it appears or disappears.
 */
@utility spin-in-* {
  --animation-enter-rotate: calc(1deg * --value(integer));
}

@utility spin-out-* {
  --animation-exit-rotate: calc(1deg * --value(integer));
}

/**
 * Scale Animations
 * -----------------------------------------------------------------------------
 * Adjust the size of the element when it appears or disappears.
 */
@utility zoom-in-* {
  --animation-enter-scale: --value([percentage]);
  --animation-enter-scale: calc(--value(integer) * 1%);
}

@utility zoom-out-* {
  --animation-exit-scale: --value([percentage]);
  --animation-exit-scale: calc(--value(integer) * 1%);
}

/**
 * Slide Animations - Enter
 * -----------------------------------------------------------------------------
 * Effects for sliding in from directions: left, right, top, bottom.
 */
@utility slide-from-l-full {
  --animation-enter-translate-x: -100%;
}

@utility slide-from-l-* {
  --animation-enter-translate-x: calc(var(--spacing) * --value(number) * -1);
  --animation-enter-translate-x: calc(--value(--aspect-ratio- *, ratio, [ratio]) * -100%);
  --animation-enter-translate-x: calc(--value([length], [percentage]) * -1);
}

@utility slide-from-r-full {
  --animation-enter-translate-x: 100%;
}

@utility slide-from-r-* {
  --animation-enter-translate-x: calc(var(--spacing) * --value(number));
  --animation-enter-translate-x: calc(--value(--aspect-ratio- *, ratio, [ratio]) * 100%);
  --animation-enter-translate-x: --value([length], [percentage]);
}

@utility slide-from-t-full {
  --animation-enter-translate-y: -100%;
}

@utility slide-from-t-* {
  --animation-enter-translate-y: calc(var(--spacing) * --value(number) * -1);
  --animation-enter-translate-y: calc(--value(--aspect-ratio- *, ratio, [ratio]) * -100%);
  --animation-enter-translate-y: calc(--value([length], [percentage]) * -1);
}

@utility slide-from-b-full {
  --animation-enter-translate-y: 100%;
}

@utility slide-from-b-* {
  --animation-enter-translate-y: calc(var(--spacing) * --value(number));
  --animation-enter-translate-y: calc(--value(--aspect-ratio- *, ratio, [ratio]) * 100%);
  --animation-enter-translate-y: --value([length], [percentage]);
}

/**
 * Slide Animations - Exit
 * -----------------------------------------------------------------------------
 * Effects for sliding out of the screen in directions: left, right, top, bottom.
 */
@utility slide-to-l-full {
  --animation-exit-translate-x: -100%;
}

@utility slide-to-l-* {
  --animation-exit-translate-x: calc(var(--spacing) * --value(number) * -1);
  --animation-exit-translate-x: calc(--value(--aspect-ratio- *, ratio, [ratio]) * -100%);
  --animation-exit-translate-x: calc(--value([length], [percentage]) * -1);
}

@utility slide-to-r-full {
  --animation-exit-translate-x: 100%;
}

@utility slide-to-r-* {
  --animation-exit-translate-x: calc(var(--spacing) * --value(number));
  --animation-exit-translate-x: calc(--value(--aspect-ratio- *, ratio, [ratio]) * 100%);
  --animation-exit-translate-x: --value([length], [percentage]);
}

@utility slide-to-t-full {
  --animation-exit-translate-y: -100%;
}

@utility slide-to-t-* {
  --animation-exit-translate-y: calc(var(--spacing) * --value(number) * -1);
  --animation-exit-translate-y: calc(--value(--aspect-ratio- *, ratio, [ratio]) * -100%);
  --animation-exit-translate-y: calc(--value([length], [percentage]) * -1);
}

@utility slide-to-b-full {
  --animation-exit-translate-y: 100%;
}

@utility slide-to-b-* {
  --animation-exit-translate-y: calc(var(--spacing) * --value(number));
  --animation-exit-translate-y: calc(--value(--aspect-ratio- *, ratio, [ratio]) * 100%);
  --animation-exit-translate-y: --value([length], [percentage]);
}
