/*
  Named color theme definitions, providing a set of CSS variables for consistent color usage
  in various components and elements throughout the application.
  Each color has its purpose (e.g., background, primary, accent, sidebar).
*/
@theme {
  --color-background: var(--color-white);
  --color-foreground: var(--color-zinc-950);

  --color-input: var(--color-zinc-300);
  --color-input-hover: var(--color-zinc-950);
  --color-input-focus: var(--color-sky-400);

  --color-border: var(--color-zinc-300);
  --color-ring: --alpha(var(--color-sky-400) / 32%);

  --color-primary: var(--color-sky-600);
  --color-primary-foreground: var(--color-sky-50);

  --color-secondary: var(--color-zinc-200);
  --color-secondary-foreground: var(--color-zinc-950);

  --color-accent: var(--color-zinc-200);
  --color-accent-foreground: var(--color-zinc-950);

  --color-muted: var(--color-zinc-200);
  --color-muted-foreground: var(--color-zinc-500);

  --color-destructive: var(--color-red-500);
  --color-destructive-foreground: var(--color-red-50);

  --color-info: var(--color-cyan-700);
  --color-info-foreground: var(--color-cyan-50);

  --color-success: var(--color-green-700);
  --color-success-foreground: var(--color-green-50);

  --color-warning: var(--color-yellow-700);
  --color-warning-foreground: var(--color-yellow-50);

  --color-popover: var(--color-white);
  --color-popover-foreground: var(--color-zinc-950);

  --color-card: var(--color-white);
  --color-card-foreground: var(--color-zinc-950);

  --color-sidebar: var(--color-zinc-50);
  --color-sidebar-foreground: var(--color-zinc-700);

  --color-sidebar-primary: var(--color-zinc-900);
  --color-sidebar-primary-foreground: var(--color-zinc-50);

  --color-sidebar-accent: var(--color-zinc-100);
  --color-sidebar-accent-foreground: var(--color-zinc-900);

  --color-sidebar-border: var(--color-zinc-200);
  --color-sidebar-ring: var(--color-sky-100);

  --color-chart-1: var(--color-orange-500);
  --color-chart-2: var(--color-cyan-500);
  --color-chart-3: var(--color-lime-500);
  --color-chart-4: var(--color-yellow-500);
  --color-chart-5: var(--color-fuchsia-500);
}

/*
  Base styles applied across all elements. Handles general appearance such as
  border color and text selection background styling.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-border);
  }

  ::selection {
    background-color: var(--color-primary);
    color: var(--color-background);
  }

  html,
  body {
    background-color: var(--color-background);
    color: var(--color-foreground);
  }

  input {
    &::-webkit-search-cancel-button,
    &::-webkit-search-decoration {
      appearance: none;
    }
  }
}

/*
  Animation definitions using keyframes for seamless UI transitions.
  These include cursor blinking and collapsible sections opening/closing.
*/
@theme {
  --animate-caret-blink: caret-blink 1000ms ease infinite;
  --animate-collapsible-closed: collapsible-closed 200ms ease;
  --animate-collapsible-open: collapsible-open 200ms ease;

  @keyframes caret-blink {
    0%,
    70%,
    100% {
      opacity: 1;
    }

    20%,
    50% {
      opacity: 0;
    }
  }

  @keyframes collapsible-closed {
    from {
      height: var(--radix-collapsible-content-height);
    }
    to {
      height: 0;
    }
  }

  @keyframes collapsible-open {
    from {
      height: 0;
    }
    to {
      height: var(--radix-collapsible-content-height);
    }
  }
}

/*
  Base layer for general animations. Defines fade-in/out and general
  appearance/disappearance animations with variable duration and easing.
*/
@theme {
  --animate-fade-in: fadeIn 250ms ease-out;
  --animate-fade-out: fadeOut 250ms ease-in;

  --animate-in: enter 300ms cubic-bezier(0.32, 0.72, 0, 1);
  --animate-out: exit 250ms cubic-bezier(0.32, 0.72, 0, 1);

  @keyframes fadeIn {
    from {
      opacity: var(--animation-enter-opacity, 0);
    }
  }

  @keyframes fadeOut {
    to {
      opacity: var(--animation-exit-opacity, 0);
    }
  }

  @keyframes enter {
    from {
      opacity: var(--animation-enter-opacity, 1);
      transform: translate3d(var(--animation-enter-translate-x, 0), var(--animation-enter-translate-y, 0), 0)
        scale3d(var(--animation-enter-scale, 1), var(--animation-enter-scale, 1), var(--animation-enter-scale, 1))
        rotate(var(--animation-enter-rotate, 0));
    }
  }

  @keyframes exit {
    to {
      opacity: var(--animation-exit-opacity, 1);
      transform: translate3d(var(--animation-exit-translate-x, 0), var(--animation-exit-translate-y, 0), 0)
        scale3d(var(--animation-exit-scale, 1), var(--animation-exit-scale, 1), var(--animation-exit-scale, 1))
        rotate(var(--animation-exit-rotate, 0));
    }
  }
}

@utility animation-ease-linear {
  animation-timing-function: linear;
}

@utility animation-ease-in {
  animation-timing-function: var(--ease-in);
}

@utility animation-ease-out {
  animation-timing-function: var(--ease-out);
}

@utility animation-ease-in-out {
  animation-timing-function: var(--ease-in-out);
}

@utility animation-ease-initial {
  animation-timing-function: initial;
}

@utility animation-ease-* {
  animation-timing-function: --value([ *]);
}

@utility animation-state-paused {
  animation-play-state: paused;
}

@utility animation-state-running {
  animation-play-state: running;
}

@utility animation-state-initial {
  animation-play-state: initial;
}

@utility animation-state-* {
  animation-play-state: --value([ *]);
}

@utility animation-repeat-infinite {
  animation-iteration-count: infinite;
}

@utility animation-repeat-initial {
  animation-iteration-count: initial;
}

@utility animation-repeat-* {
  animation-iteration-count: --value(integer, [integer]);
}

@utility animation-composition-replace {
  animation-composition: replace;
}

@utility animation-composition-add {
  animation-composition: add;
}

@utility animation-composition-accumulate {
  animation-composition: accumulate;
}

@utility animation-composition-initial {
  animation-composition: initial;
}

@utility animation-composition-* {
  animation-composition: --value([ *]);
}

@utility animation-delay-initial {
  animation-delay: initial;
}

@utility animation-delay-* {
  animation-delay: calc(--value(integer) * 1ms);
  animation-delay: --value([ *]);
}

@utility animation-direction-normal {
  animation-direction: normal;
}

@utility animation-direction-reverse {
  animation-direction: reverse;
}

@utility animation-direction-alternate {
  animation-direction: alternate;
}

@utility animation-direction-alternate-reverse {
  animation-direction: alternate-reverse;
}

@utility animation-direction-initial {
  animation-direction: initial;
}

@utility animation-direction-* {
  animation-direction: --value([ *]);
}

@utility animation-duration-initial {
  animation-duration: initial;
}

@utility animation-duration-* {
  animation-duration: calc(--value(integer) * 1ms);
  animation-duration: --value([ *]);
}

@utility animation-fill-none {
  animation-fill-mode: none;
}

@utility animation-fill-forwards {
  animation-fill-mode: forwards;
}

@utility animation-fill-backwards {
  animation-fill-mode: backwards;
}

@utility animation-fill-both {
  animation-fill-mode: both;
}

@utility animation-fill-* {
  animation-fill-mode: --value([ *]);
}

@utility fade-in-* {
  --animation-enter-opacity: calc(--value(integer) * 1%);
  --animation-enter-opacity: --value(--opacity- *, [percentage]);
}

@utility fade-out-* {
  --animation-exit-opacity: calc(--value(integer) * 1%);
  --animation-exit-opacity: --value(--opacity- *, [percentage]);
}

@utility spin-in-* {
  --animation-enter-rotate: calc(1deg * --value(integer));
}

@utility spin-out-* {
  --animation-exit-rotate: calc(1deg * --value(integer));
}

@utility zoom-in-* {
  --animation-enter-scale: --value([percentage]);
  --animation-enter-scale: calc(--value(integer) * 1%);
}

@utility zoom-out-* {
  --animation-exit-scale: --value([percentage]);
  --animation-exit-scale: calc(--value(integer) * 1%);
}

@utility slide-from-l-full {
  --animation-enter-translate-x: -100%;
}

@utility slide-from-l-* {
  --animation-enter-translate-x: calc(var(--spacing) * --value(number) * -1);
  --animation-enter-translate-x: calc(--value(--aspect-ratio- *, ratio, [ratio]) * -100%);
  --animation-enter-translate-x: calc(--value([length], [percentage]) * -1);
}

@utility slide-from-r-full {
  --animation-enter-translate-x: 100%;
}

@utility slide-from-r-* {
  --animation-enter-translate-x: calc(var(--spacing) * --value(number));
  --animation-enter-translate-x: calc(--value(--aspect-ratio- *, ratio, [ratio]) * 100%);
  --animation-enter-translate-x: --value([length], [percentage]);
}

@utility slide-from-t-full {
  --animation-enter-translate-y: -100%;
}

@utility slide-from-t-* {
  --animation-enter-translate-y: calc(var(--spacing) * --value(number) * -1);
  --animation-enter-translate-y: calc(--value(--aspect-ratio- *, ratio, [ratio]) * -100%);
  --animation-enter-translate-y: calc(--value([length], [percentage]) * -1);
}

@utility slide-from-b-full {
  --animation-enter-translate-y: 100%;
}

@utility slide-from-b-* {
  --animation-enter-translate-y: calc(var(--spacing) * --value(number));
  --animation-enter-translate-y: calc(--value(--aspect-ratio- *, ratio, [ratio]) * 100%);
  --animation-enter-translate-y: --value([length], [percentage]);
}

@utility slide-to-l-full {
  --animation-exit-translate-x: -100%;
}

@utility slide-to-l-* {
  --animation-exit-translate-x: calc(var(--spacing) * --value(number) * -1);
  --animation-exit-translate-x: calc(--value(--aspect-ratio- *, ratio, [ratio]) * -100%);
  --animation-exit-translate-x: calc(--value([length], [percentage]) * -1);
}

@utility slide-to-r-full {
  --animation-exit-translate-x: 100%;
}

@utility slide-to-r-* {
  --animation-exit-translate-x: calc(var(--spacing) * --value(number));
  --animation-exit-translate-x: calc(--value(--aspect-ratio- *, ratio, [ratio]) * 100%);
  --animation-exit-translate-x: --value([length], [percentage]);
}

@utility slide-to-t-full {
  --animation-exit-translate-y: -100%;
}

@utility slide-to-t-* {
  --animation-exit-translate-y: calc(var(--spacing) * --value(number) * -1);
  --animation-exit-translate-y: calc(--value(--aspect-ratio- *, ratio, [ratio]) * -100%);
  --animation-exit-translate-y: calc(--value([length], [percentage]) * -1);
}

@utility slide-to-b-full {
  --animation-exit-translate-y: 100%;
}

@utility slide-to-b-* {
  --animation-exit-translate-y: calc(var(--spacing) * --value(number));
  --animation-exit-translate-y: calc(--value(--aspect-ratio- *, ratio, [ratio]) * 100%);
  --animation-exit-translate-y: --value([length], [percentage]);
}
