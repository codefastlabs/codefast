import path from "node:path";

import type { ProcessOptions } from "@/types/config";
import type { Logger } from "@/utils/logger";

import { getConfig, getPackageConfig } from "@/config";
import { analyzeImports } from "@/core/analyzer";
import { generateExports } from "@/core/exporter";
import {
  backupPackageJson,
  fileExists,
  findAllPackages,
  readPackageJson,
  saveExportsAnalysis,
  savePackageJson,
} from "@/utils/file-utils";

/**
 * X·ª≠ l√Ω m·ªôt package ƒë∆°n l·∫ª
 */
export function processPackage(packageJsonPath: string, options: ProcessOptions, logger: Logger): boolean {
  const packageDir = path.dirname(packageJsonPath);
  const packageJson = readPackageJson(packageJsonPath);

  if (!packageJson) {
    logger.error(`Kh√¥ng th·ªÉ ƒë·ªçc ${packageJsonPath}`);

    return false;
  }

  const packageName = packageJson.name;

  // Ki·ªÉm tra n·∫øu c√≥ filter package c·ª• th·ªÉ
  if (options.packageFilter && packageName !== options.packageFilter) {
    logger.debug(`B·ªè qua ${packageName} (kh√¥ng kh·ªõp v·ªõi filter)`);

    return false;
  }

  logger.info(`\nüì¶ X·ª≠ l√Ω package: ${packageName}`);

  const config = getConfig(options.configPath);
  const packageConfig = getPackageConfig(packageName, config);
  const srcIndexPath = path.join(packageDir, packageConfig.srcIndexPath);

  if (!fileExists(srcIndexPath)) {
    logger.error(`Kh√¥ng t√¨m th·∫•y file ngu·ªìn t·∫°i ${srcIndexPath}`);

    return false;
  }

  // Ph√¢n t√≠ch imports
  logger.info(`üîç Ph√¢n t√≠ch imports t·ª´ ${srcIndexPath}...`);
  const { imports, importsByDir } = analyzeImports(srcIndexPath);

  if (imports.length === 0) {
    logger.warn(`Kh√¥ng t√¨m th·∫•y imports n√†o ƒë·ªÉ ph√¢n t√≠ch trong ${packageName}`);

    return false;
  }

  logger.success(`Ph√¢n t√≠ch ho√†n t·∫•t. T√¨m th·∫•y ${imports.length} subpath exports.`);

  // Log chi ti·∫øt th∆∞ m·ª•c n·∫øu verbose mode
  for (const [dir, dirImports] of Object.entries(importsByDir)) {
    logger.debug(`üìÅ ${dir}: ${dirImports.length} modules`);

    for (const imp of dirImports) {
      logger.debug(`- ${imp.originalPath} -> ${imp.exportPath}`);
    }
  }

  // L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch
  saveExportsAnalysis(packageDir, { imports, importsByDir });

  // T·∫°o c·∫•u tr√∫c exports m·ªõi
  const newExports = generateExports(packageName, imports, packageJson.exports, config);

  // So s√°nh v·ªõi exports hi·ªán t·∫°i
  const currentExportsCount = packageJson.exports ? Object.keys(packageJson.exports).length : 0;
  const newExportsCount = Object.keys(newExports).length;

  logger.info(`üìä Exports: ${currentExportsCount} -> ${newExportsCount}`);

  if (options.dryRun) {
    logger.warn(`üîç Dry run mode: kh√¥ng l∆∞u thay ƒë·ªïi cho ${packageName}`);

    return true;
  }

  // Backup package.json
  if (backupPackageJson(packageJsonPath)) {
    logger.success(`ƒê√£ sao l∆∞u ${packageJsonPath}`);
  }

  // C·∫≠p nh·∫≠t package.json
  const updatedPackageJson = { ...packageJson, exports: newExports };

  if (savePackageJson(packageJsonPath, updatedPackageJson)) {
    logger.success(`ƒê√£ c·∫≠p nh·∫≠t exports cho ${packageName}`);

    return true;
  }

  logger.error(`Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ${packageJsonPath}`);

  return false;
}

/**
 * X·ª≠ l√Ω t·∫•t c·∫£ c√°c package trong workspace
 */
export async function processAllPackages(options: ProcessOptions, logger: Logger): Promise<void> {
  try {
    logger.info("üîç T√¨m ki·∫øm packages...");
    const config = getConfig(options.configPath);
    const packageJsonPaths = await findAllPackages(config);

    if (packageJsonPaths.length === 0) {
      logger.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y package n√†o.");

      return;
    }

    logger.success(`‚úÖ T√¨m th·∫•y ${packageJsonPaths.length} packages.`);

    let successCount = 0;
    let skipCount = 0;
    let errorCount = 0;

    for (const packageJsonPath of packageJsonPaths) {
      const result = processPackage(packageJsonPath, options, logger);

      if (result) {
        successCount++;
      } else if (options.packageFilter) {
        skipCount++;
      } else {
        errorCount++;
      }
    }

    logger.success("\n‚úÖ ƒê√£ ho√†n t·∫•t c·∫≠p nh·∫≠t exports.");
    logger.info(`üìä Th·ªëng k√™: ${successCount} th√†nh c√¥ng, ${skipCount} b·ªè qua, ${errorCount} l·ªói`);
  } catch (error) {
    logger.error("‚ùå L·ªói khi x·ª≠ l√Ω packages:", error);
    throw error;
  }
}
